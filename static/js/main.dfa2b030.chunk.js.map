{"version":3,"sources":["components/SearchForm.jsx","components/Navbar.jsx","components/NotFound.jsx","components/Photo.jsx","components/PhotoNotFound.jsx","components/PhotoList.jsx","config.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","e","preventDefault","this","props","searchPhotos","query","value","path","history","push","currentTarget","reset","onSubmit","handleSubmit","className","ref","input","type","name","placeholder","required","fill","height","viewBox","width","xmlns","d","Component","withRouter","Navbar","to","NotFound","Photo","farmId","serverId","id","secret","src","alt","PhotoNotFound","PhotoList","isLoading","data","match","url","replace","startsWith","params","photos","map","photo","key","farm","server","length","Fragment","apiKey","App","state","search","bikePhotos","landscapePhotos","forestPhotos","fetchPhotos","property","setState","axios","get","photosJson","console","log","bind","exact","render","component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dfa2b030.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router';\r\n\r\nclass SearchForm extends Component{\r\n\r\n    /**\r\n     * Push into history a new path according to value search.\r\n     * Also search photos according to value search.\r\n     * @param {Event} e \r\n     */\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        this.props.searchPhotos(this.query.value);\r\n        let path = `/search/${this.query.value}`;\r\n        this.props.history.push(path);\r\n        e.currentTarget.reset();\r\n    }\r\n\r\n\r\n    /**\r\n     * Renders a form component with a ref\r\n     */\r\n    render() {\r\n        return(\r\n            <form onSubmit={(e) => this.handleSubmit(e)} className=\"search-form\">\r\n                <input \r\n                    ref={(input) => this.query = input}\r\n                    type=\"search\" \r\n                    name=\"search\" \r\n                    placeholder=\"Search\" \r\n                    required\r\n                />\r\n                <button type=\"submit\" className=\"search-button\">\r\n                <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\r\n                    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                </svg>\r\n                </button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(SearchForm);","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n    /**\r\n     * Renders three different NavLink options\r\n     */\r\n    return(\r\n        <nav className=\"main-nav\">\r\n            <ul>\r\n                <li><NavLink to='/bicycles'>Bicycles</NavLink></li>\r\n                <li><NavLink to='/forest'>Forest</NavLink></li>\r\n                <li><NavLink to='/landscapes'>Landscapes</NavLink></li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\n/**\r\n * Plain text to display a not found route\r\n */\r\nconst NotFound = () => {\r\n    return(\r\n        <div>Not Found!</div>\r\n    );\r\n}\r\n\r\nexport default NotFound;","import React from 'react';\r\n\r\n// Renders every photo from a base URL with params\r\nconst Photo = ({ farmId, serverId, id, secret }) => {\r\n    return(\r\n        <li>\r\n            <img src={`https://farm${farmId}.staticflickr.com/${serverId}/${id}_${secret}.jpg`} alt=\"\" />\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Photo;","import React from 'react';\r\n\r\n/**\r\n * Not Found results component\r\n * This is almost plain text\r\n */\r\nconst PhotoNotFound = () => {\r\n    return(\r\n        <li className=\"not-found\">\r\n            <h3>No Results Found</h3>\r\n            <p>Your search did not return any results. Please try again.</p>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default PhotoNotFound;","import React from 'react';\r\nimport Photo from './Photo';\r\nimport PhotoNotPhound from './PhotoNotFound';\r\n\r\nconst PhotoList = ({isLoading, data, match}) => {\r\n\r\n    // Regex to remove the starting '/' character\r\n    const regex = /^\\//g;\r\n    let query = match.url.replace(regex, '')\r\n    // If route is base_url/search/:query then grabs param\r\n    if (query.startsWith('search')) {\r\n        query=match.params.query\r\n    } \r\n    \r\n    /**\r\n     * Renders every photo from data prop\r\n     */\r\n    const photos = data.map(photo => \r\n        <Photo \r\n            key={photo.id}\r\n            farmId={photo.farm}\r\n            serverId={photo.server}\r\n            id={photo.id}\r\n            secret={photo.secret}\r\n            alt={photo.alt}\r\n        />\r\n    );\r\n\r\n    /**\r\n     * Validates isLoading prop and renders photos if there is at least one\r\n     */\r\n    const renderPhotos = () => {\r\n        return(\r\n            (isLoading) \r\n                ? <img src=\"/search.gif\" alt=\"search gif\"/>\r\n                : (photos.length > 0) \r\n                    ?  <React.Fragment>\r\n                            <h2>Results for: {query}</h2>\r\n                            <ul>\r\n                                {photos}\r\n                            </ul>\r\n                        </React.Fragment>\r\n                    :  <ul><PhotoNotPhound /></ul>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div className=\"photo-container\">\r\n            {renderPhotos()}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default PhotoList;","const apiKey = '2357507bfdf5a2e8a96d7b715154d5b1';\r\nexport default apiKey;","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport axios from 'axios';\n\nimport SearchForm from './components/SearchForm'\nimport Navbar from './components/Navbar'\nimport NotFound from './components/NotFound';\nimport PhotoList from './components/PhotoList';\nimport './css/index.css';\n\nimport apiKey from './config'\n\nclass App extends Component{\n\n  constructor(props){\n    super(props)\n\n    /**\n     * State for App component which contains\n     * 3 arrays for nav links and 1 array for search photos\n     *  */ \n    this.state = {\n      search: [],\n      bikePhotos: [],\n      landscapePhotos: [],\n      forestPhotos: [],\n      isLoading: false\n    }\n  }\n\n\n  /**\n   * Initialize component and fetch data to navLinks results\n   */\n  async componentDidMount() {\n    this.fetchPhotos('bicycles', 'bikePhotos');\n    this.fetchPhotos('forest', 'forestPhotos');\n    this.fetchPhotos('landscape', 'landscapePhotos');\n  }\n\n  /**\n   * Fetch photos from flickr api\n   * @param {String} query search terms  \n   * @param {*} property Property where to save data results in APP state\n   */\n  async fetchPhotos(query, property = 'search') {\n    this.setState({isLoading: true})\n    try {\n      // Await the api response and validate if it exists\n      const photosJson = await axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1`);\n      if (photosJson.data) {\n        const { photos } = photosJson.data;\n        // Set result into state passed by parameter\n        this.setState({\n          [property]: photos.photo\n        });\n      }\n    } catch (error) {\n      console.log('there has been an error fetching photos');\n    } finally {\n      // Always set isLoading property to false after success or error\n      this.setState({isLoading: false})\n    }\n  }\n\n  /**\n   * Renders all page inside a BrowserRouter and validates each path\n   * to render components inside Route components\n   */\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"container\">\n          <SearchForm searchPhotos={this.fetchPhotos.bind(this)} />\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\" render={() => <Redirect to='/forest' />} />\n            <Route path=\"/search/:query\" render={({match}) => {\n              return(\n                <PhotoList query={this.state.query} isLoading={this.state.isLoading} data={this.state.search} match={match}/>\n              )\n            }} />\n            <Route path=\"/bicycles\" render={({match}) => {\n              return(\n                <PhotoList query={this.state.query} isLoading={this.state.isLoading} data={this.state.bikePhotos} match={match}/>\n              )\n            }} />\n            <Route path=\"/forest\" render={({match}) => {\n              return(\n                <PhotoList query={this.state.query} isLoading={this.state.isLoading} data={this.state.forestPhotos} match={match}/>\n              )\n            }} />\n            <Route path=\"/landscapes\" render={({match}) => {\n              return(\n                <PhotoList query={this.state.query} isLoading={this.state.isLoading} data={this.state.landscapePhotos} match={match}/>\n              )\n            }} />\n            <Route path=\"/404\" component={NotFound} />\n            <Route render={() => <Redirect to='/404' />} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}